/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileDragger_H
#define FileDragger_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "file_dragger_types.h"

namespace file_dragger {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileDraggerIf {
 public:
  virtual ~FileDraggerIf() {}
  virtual void Query(ResponseQuery& _return) = 0;
  virtual void Download(ResponseDownload& _return, const RequestDownload& rd) = 0;
  virtual void Finish(ResponseFinish& _return, const RequestFinish& rf) = 0;
};

class FileDraggerIfFactory {
 public:
  typedef FileDraggerIf Handler;

  virtual ~FileDraggerIfFactory() {}

  virtual FileDraggerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileDraggerIf* /* handler */) = 0;
};

class FileDraggerIfSingletonFactory : virtual public FileDraggerIfFactory {
 public:
  FileDraggerIfSingletonFactory(const boost::shared_ptr<FileDraggerIf>& iface) : iface_(iface) {}
  virtual ~FileDraggerIfSingletonFactory() {}

  virtual FileDraggerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileDraggerIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileDraggerIf> iface_;
};

class FileDraggerNull : virtual public FileDraggerIf {
 public:
  virtual ~FileDraggerNull() {}
  void Query(ResponseQuery& /* _return */) {
    return;
  }
  void Download(ResponseDownload& /* _return */, const RequestDownload& /* rd */) {
    return;
  }
  void Finish(ResponseFinish& /* _return */, const RequestFinish& /* rf */) {
    return;
  }
};


class FileDragger_Query_args {
 public:

  FileDragger_Query_args(const FileDragger_Query_args&);
  FileDragger_Query_args& operator=(const FileDragger_Query_args&);
  FileDragger_Query_args() {
  }

  virtual ~FileDragger_Query_args() throw();

  bool operator == (const FileDragger_Query_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileDragger_Query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileDragger_Query_pargs {
 public:


  virtual ~FileDragger_Query_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Query_result__isset {
  _FileDragger_Query_result__isset() : success(false) {}
  bool success :1;
} _FileDragger_Query_result__isset;

class FileDragger_Query_result {
 public:

  FileDragger_Query_result(const FileDragger_Query_result&);
  FileDragger_Query_result& operator=(const FileDragger_Query_result&);
  FileDragger_Query_result() {
  }

  virtual ~FileDragger_Query_result() throw();
  ResponseQuery success;

  _FileDragger_Query_result__isset __isset;

  void __set_success(const ResponseQuery& val);

  bool operator == (const FileDragger_Query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileDragger_Query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Query_presult__isset {
  _FileDragger_Query_presult__isset() : success(false) {}
  bool success :1;
} _FileDragger_Query_presult__isset;

class FileDragger_Query_presult {
 public:


  virtual ~FileDragger_Query_presult() throw();
  ResponseQuery* success;

  _FileDragger_Query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileDragger_Download_args__isset {
  _FileDragger_Download_args__isset() : rd(false) {}
  bool rd :1;
} _FileDragger_Download_args__isset;

class FileDragger_Download_args {
 public:

  FileDragger_Download_args(const FileDragger_Download_args&);
  FileDragger_Download_args& operator=(const FileDragger_Download_args&);
  FileDragger_Download_args() {
  }

  virtual ~FileDragger_Download_args() throw();
  RequestDownload rd;

  _FileDragger_Download_args__isset __isset;

  void __set_rd(const RequestDownload& val);

  bool operator == (const FileDragger_Download_args & rhs) const
  {
    if (!(rd == rhs.rd))
      return false;
    return true;
  }
  bool operator != (const FileDragger_Download_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Download_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileDragger_Download_pargs {
 public:


  virtual ~FileDragger_Download_pargs() throw();
  const RequestDownload* rd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Download_result__isset {
  _FileDragger_Download_result__isset() : success(false) {}
  bool success :1;
} _FileDragger_Download_result__isset;

class FileDragger_Download_result {
 public:

  FileDragger_Download_result(const FileDragger_Download_result&);
  FileDragger_Download_result& operator=(const FileDragger_Download_result&);
  FileDragger_Download_result() {
  }

  virtual ~FileDragger_Download_result() throw();
  ResponseDownload success;

  _FileDragger_Download_result__isset __isset;

  void __set_success(const ResponseDownload& val);

  bool operator == (const FileDragger_Download_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileDragger_Download_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Download_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Download_presult__isset {
  _FileDragger_Download_presult__isset() : success(false) {}
  bool success :1;
} _FileDragger_Download_presult__isset;

class FileDragger_Download_presult {
 public:


  virtual ~FileDragger_Download_presult() throw();
  ResponseDownload* success;

  _FileDragger_Download_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileDragger_Finish_args__isset {
  _FileDragger_Finish_args__isset() : rf(false) {}
  bool rf :1;
} _FileDragger_Finish_args__isset;

class FileDragger_Finish_args {
 public:

  FileDragger_Finish_args(const FileDragger_Finish_args&);
  FileDragger_Finish_args& operator=(const FileDragger_Finish_args&);
  FileDragger_Finish_args() {
  }

  virtual ~FileDragger_Finish_args() throw();
  RequestFinish rf;

  _FileDragger_Finish_args__isset __isset;

  void __set_rf(const RequestFinish& val);

  bool operator == (const FileDragger_Finish_args & rhs) const
  {
    if (!(rf == rhs.rf))
      return false;
    return true;
  }
  bool operator != (const FileDragger_Finish_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Finish_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileDragger_Finish_pargs {
 public:


  virtual ~FileDragger_Finish_pargs() throw();
  const RequestFinish* rf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Finish_result__isset {
  _FileDragger_Finish_result__isset() : success(false) {}
  bool success :1;
} _FileDragger_Finish_result__isset;

class FileDragger_Finish_result {
 public:

  FileDragger_Finish_result(const FileDragger_Finish_result&);
  FileDragger_Finish_result& operator=(const FileDragger_Finish_result&);
  FileDragger_Finish_result() {
  }

  virtual ~FileDragger_Finish_result() throw();
  ResponseFinish success;

  _FileDragger_Finish_result__isset __isset;

  void __set_success(const ResponseFinish& val);

  bool operator == (const FileDragger_Finish_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileDragger_Finish_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDragger_Finish_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDragger_Finish_presult__isset {
  _FileDragger_Finish_presult__isset() : success(false) {}
  bool success :1;
} _FileDragger_Finish_presult__isset;

class FileDragger_Finish_presult {
 public:


  virtual ~FileDragger_Finish_presult() throw();
  ResponseFinish* success;

  _FileDragger_Finish_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileDraggerClient : virtual public FileDraggerIf {
 public:
  FileDraggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileDraggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Query(ResponseQuery& _return);
  void send_Query();
  void recv_Query(ResponseQuery& _return);
  void Download(ResponseDownload& _return, const RequestDownload& rd);
  void send_Download(const RequestDownload& rd);
  void recv_Download(ResponseDownload& _return);
  void Finish(ResponseFinish& _return, const RequestFinish& rf);
  void send_Finish(const RequestFinish& rf);
  void recv_Finish(ResponseFinish& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileDraggerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileDraggerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileDraggerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Download(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Finish(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileDraggerProcessor(boost::shared_ptr<FileDraggerIf> iface) :
    iface_(iface) {
    processMap_["Query"] = &FileDraggerProcessor::process_Query;
    processMap_["Download"] = &FileDraggerProcessor::process_Download;
    processMap_["Finish"] = &FileDraggerProcessor::process_Finish;
  }

  virtual ~FileDraggerProcessor() {}
};

class FileDraggerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileDraggerProcessorFactory(const ::boost::shared_ptr< FileDraggerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileDraggerIfFactory > handlerFactory_;
};

class FileDraggerMultiface : virtual public FileDraggerIf {
 public:
  FileDraggerMultiface(std::vector<boost::shared_ptr<FileDraggerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileDraggerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileDraggerIf> > ifaces_;
  FileDraggerMultiface() {}
  void add(boost::shared_ptr<FileDraggerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Query(ResponseQuery& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Query(_return);
    }
    ifaces_[i]->Query(_return);
    return;
  }

  void Download(ResponseDownload& _return, const RequestDownload& rd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Download(_return, rd);
    }
    ifaces_[i]->Download(_return, rd);
    return;
  }

  void Finish(ResponseFinish& _return, const RequestFinish& rf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Finish(_return, rf);
    }
    ifaces_[i]->Finish(_return, rf);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileDraggerConcurrentClient : virtual public FileDraggerIf {
 public:
  FileDraggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileDraggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Query(ResponseQuery& _return);
  int32_t send_Query();
  void recv_Query(ResponseQuery& _return, const int32_t seqid);
  void Download(ResponseDownload& _return, const RequestDownload& rd);
  int32_t send_Download(const RequestDownload& rd);
  void recv_Download(ResponseDownload& _return, const int32_t seqid);
  void Finish(ResponseFinish& _return, const RequestFinish& rf);
  int32_t send_Finish(const RequestFinish& rf);
  void recv_Finish(ResponseFinish& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
